Question 2: Regular Expressions (with Python tests)

import re

# 1) C++ identifiers (start with letter or _, then letters/digits/_)
pattern_id = r'^[A-Za-z_][A-Za-z0-9_]*$'
for t in ["var1", "_thing", "9bad"]:
    print("ID:", t, "->", bool(re.match(pattern_id, t)))

# 2) U.S. phone numbers: (XXX) XXX-XXXX or XXX-XXX-XXXX
pattern_phone = r'^(\(\d{3}\)\s|\d{3}-)\d{3}-\d{4}$'
for t in ["(256) 555-1212", "256-555-1212", "5551212"]:
    print("Phone:", t, "->", bool(re.match(pattern_phone, t)))

# 3) Floating point numbers with optional sign and decimal
pattern_float = r'^[+-]?(\d+(\.\d*)?|\.\d+)$'
for t in ["3.14", "-0.5", "+42", ".", "abc"]:
    print("Float:", t, "->", bool(re.match(pattern_float, t)))

# 4) Binary palindromes length 3 or 4
pattern_binpal = r'^(000|010|101|111|0110|1001|1111|0000)$'
for t in ["101", "0110", "111", "0101"]:
    print("BinPal:", t, "->", bool(re.match(pattern_binpal, t)))


-------------------------------------------
Question 2: Parse Trees (using the given CFG)

1) (a+(b*C)/2)

Expr
 └─ Term
     └─ Factor (Expr)
             └─ Expr + Term
                 ├─ Expr -> Factor -> a
                 └─ Term / Factor
                     ├─ Term -> Factor -> (b*C)
                     └─ Factor -> 2

2) a*(3+b)*4

Expr
 └─ Term * Factor
     ├─ Term * Factor
     │   ├─ Term -> Factor -> a
     │   └─ Factor -> (3+b)
     └─ Factor -> 4

3) 42*c+3*(a+b)

Expr + Term
 ├─ Expr -> Term * Factor
 │   ├─ Term -> Factor -> 42
 │   └─ Factor -> c
 └─ Term * Factor
     ├─ Term -> Factor -> 3
     └─ Factor -> (a+b)


-------------------------------------------
Question 3: Extended Grammar with unary + and -

Expr   → Expr + Term | Expr - Term | Term
Term   → Term * Factor | Term / Factor | Factor
Factor → + Factor | - Factor | ( Expr ) | number | identifier

Parse Tree for (3+-3)*4

Expr
 └─ Term * Factor
     ├─ Term -> Factor -> (3+-3)
     │       └─ Expr + Term
     │           ├─ Expr -> Factor -> 3
     │           └─ Term -> Factor -> - Factor
     │                           └─ Factor -> 3
     └─ Factor -> 4

